#+TITLE: Personal Emacs configuration
#+AUTHOR: Alain Anghelidi
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Configuration 

  Below is my *Emacs* configuration that tangle its content in ~init.el~ using the
  ~org-babel-tangle~ command.

** Basics
   Below are all the customizations used for the general look and feel of my *Emacs*.
   #+begin_src emacs-lisp 
     (setq inhibit-startup-message t)

     (scroll-bar-mode -1)        ; Disable visible scrollbar
     (tool-bar-mode -1)          ; Disable the toolbar
     (tooltip-mode -1)           ; Disable tooltips
     (setq split-width-threshold 0) ;Default split is right window
     (menu-bar-mode -1)            ; Disable the menu bar

     (column-number-mode)

     (defun my_starters_hook ()
       "Hooks to trigger at startup."
       (toggle-frame-fullscreen))

     (add-hook 'after-init-hook 'my_starters_hook)

     (defun display-line-numbers-custom-hook ()
       "Hook to enable relative line numbers in some modes."
       (display-line-numbers-mode 'relative))

     (add-hook (or 'prog-mode-hook 'text-mode-hook) 'display-line-numbers-custom-hook)

     (setq make-backup-files nil) ; remove backup files
     ;; Set up the visible bell
     (setq visible-bell t)

     (set-face-attribute 'default nil :font "Fira Code" :height 140)

     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024))

     (setq lsp-keymap-prefix "C-c l")
   #+end_src

** Abbrev
   #+begin_src emacs-lisp
     ;; Only for text
     (add-hook 'text-mode-hook #'abbrev-mode)
   #+end_src
** Packages
   This section is all about setting up package managers in *Emacs*.
   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("elpa" . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
      (package-refresh-contents))

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
	(package-install 'use-package))

     (require 'use-package)

     ;; Install quelpa
     (use-package quelpa
       :ensure t)

     ;; integrate it with use-package
     (quelpa
      '(quelpa-use-package
	:fetcher git
	:url "https://github.com/quelpa/quelpa-use-package.git"))
     (require 'quelpa-use-package)
   #+end_src

** Vterm
   Set up for `vterm`.
   #+begin_src emacs-lisp
     (use-package vterm
	 :ensure t)
   #+end_src
** Themes
   This section is all about the look of *Emacs*. I'm currently using the beautiful
   ~modus-themes~. See [[https://protesilaos.com/modus-themes/][here]] for more info.
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t)

     (use-package modus-themes
       :ensure t                        ; omit this to use the built-in themes
       :init
       ;; Add all your customizations prior to loading the themes
       (setq modus-themes-slanted-constructs t
	     modus-themes-bold-constructs nil
	     modus-themes-region 'no-extend)
       ;; Load the theme files before enabling a theme (else you get an error).
       (modus-themes-load-themes)
       :config
       ;; Load the theme of your choice:
       (modus-themes-load-vivendi)
       :bind ("<f5>" . modus-themes-toggle))


     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** Web browsing
   I'm a big fan of ~webjump~ that allow me to quickly launch search and favorite websites with my default external browser.
   #+begin_src emacs-lisp
     (use-package webjump
       :custom
       (webjump-sites '(("Github" . "https://github.com/NewMirai")
	   ("Web search[Startpage]" .
	    [simple-query "www.startpage.com" "https://www.startpage.com/do/search?q=" ""])
	   ("Youtube search" .
	    [simple-query "www.youtube.com" "https://www.youtube.com/results?search_query=" ""])
	   ("StackOverflow" .
	    [simple-query "www.stackoverflow.com" "https:://www.stackoverflow.com/search?q=" ""])))
       :bind ("C-c j" . webjump))
   #+end_src
** PDFs
   This part make ~pdf-tools~ the default PDFs reader in *Emacs*.
   #+begin_src emacs-lisp
     (use-package pdf-tools-install
       :ensure pdf-tools
       :if (display-graphic-p)
       :mode "\\.pdf\\'"
       :commands (pdf-loader-install)
       :custom
       (TeX-view-program-selection '((output-pdf "pdf-tools")))
       (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
       :hook
       (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
       :config
       (pdf-loader-install))
   #+end_src
** Org
   In this section all my org-related configuration are stored.
   #+begin_src emacs-lisp
     ;; Org mode latest version
     (use-package org
       :ensure t)

     ;; org-babel
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(( emacs-lisp . t)
	(python . t)))

     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("ditaa" . "src ditaa"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

     (setq org-confirm-babel-evaluate nil)

     (use-package org-noter
       :ensure t)
     (require 'org-noter-pdftools)

     (use-package org-pdftools
       :ensure t
       :hook (org-mode . org-pdftools-setup-link))

     (use-package org-noter-pdftools
       :ensure t
       :after org-noter
       :config
       ;; Add a function to ensure precise note is inserted
       (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
	 (interactive "P")
	 (org-noter--with-valid-session
	  (let ((org-noter-insert-note-no-questions (if toggle-no-questions
							(not org-noter-insert-note-no-questions)
						      org-noter-insert-note-no-questions))
		(org-pdftools-use-isearch-link t)
		(org-pdftools-use-freestyle-annot t))
	    (org-noter-insert-note (org-noter--get-precise-info)))))

       ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
       (defun org-noter-set-start-location (&optional arg)
	 "When opening a session with this document, go to the current location.
     With a prefix ARG, remove start location."
	 (interactive "P")
	 (org-noter--with-valid-session
	  (let ((inhibit-read-only t)
		(ast (org-noter--parse-root))
		(location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
	    (with-current-buffer (org-noter--session-notes-buffer session)
	      (org-with-wide-buffer
	       (goto-char (org-element-property :begin ast))
	       (if arg
		   (org-entry-delete nil org-noter-property-note-location)
		 (org-entry-put nil org-noter-property-note-location
				(org-noter--pretty-print-location location))))))))
       (with-eval-after-load 'pdf-annot
	 (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

     ;; org-bullet
     (use-package org-bullets
       :ensure t
       :hook (org-mode . org-bullets-mode))

     ;; org-git
     (use-package orgit
       :after magit
       :ensure t)

     (use-package orgit-forge
       :after forge
       :ensure t)

     (use-package ox-hugo
       :ensure t
       :after ox)

     ;; Activate dita
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((ditaa . t))) ; this line activates ditaa
   #+end_src
** Projects/files
   This section provides utils for browsing files and projects.
   #+begin_src emacs-lisp
      (use-package which-key
	:ensure t
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 1))

     (use-package selectrum
       :ensure t
       :config
       (selectrum-mode +1)
       (setq selectrum-refine-candidates-function #'orderless-filter)
       (setq orderless-skip-highlighting (lambda () selectrum-is-active))
       (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))

     ;; Enable richer annotations using the Marginalia package
     (use-package marginalia
       :ensure t
       :bind (("M-A" . marginalia-cycle)
	      :map minibuffer-local-map
	      ("M-A" . marginalia-cycle))
       :init
       (marginalia-mode))

     (marginalia-mode)

     (use-package orderless
       :ensure t
       :custom (completion-styles '(orderless)))

     ;; Configuration for Consult
     (use-package consult
       :ensure t
       :bind ("C-s" . consult-line))

     (use-package embark
       :ensure t
       :bind
       (("C-S-a" . embark-act)
	("C-h B" . embark-bindings))
       :init
       (setq prefix-help-command #'embark-prefix-help-command)
       :config
       (add-to-list 'display-buffer-alist
		    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		      nil
		      (window-parameters (mode-line-format . none)))))

     (use-package embark-consult
       :ensure t
       :after (embark consult)
       :demand t ; only necessary if you have the hook below
       ;; if you want to have consult previews as you move around an
       ;; auto-updating embark collect buffer
       :hook
       (embark-collect-mode . consult-preview-at-point-mode))

     (use-package projectile
	:ensure t
	:diminish projectile-mode
	:config (projectile-mode)
	;; Python setup projects
	(projectile-register-project-type 'kedro '("pyproject.toml" "notebooks" "logs" "conf" "src" "setup.cfg" "docs")
				  :project-file "pyproject.toml"
				  :compile "kedro build-docs"
				  :install "kedro install --build-reqs"
				  :test "kedro test -vvv"
				  :run "kedro run"
				  :test-prefix "test_"
				  :package "kedro package")
	:custom ((projectile-completion-system 'default))
	:bind-keymap
	("C-c p" . projectile-command-map))
   #+end_src

** Git related
   ~Magit~ and ~Forge~ for git related stuff. Also currently testing ~orgit~ and ~orgit-forge~ to interact with ~org-mode~.
   #+begin_src emacs-lisp
     ;; Git setup
     (use-package magit
       :ensure t)

     (use-package forge
       :after magit
       :ensure t)

     (use-package orgit
       :after magit
       :ensure t)

     (use-package orgit-forge
       :after forge
       :ensure t)
   #+end_src
   
** LSP related
   My ~LSP~ configuration.
   #+begin_src emacs-lisp
     (use-package lsp-julia
       :ensure t
       :custom (setq lsp-julia-default-environment "~/.julia/environments/v1.6")
       (setq lsp-julia-default-depot "~/.julia"))


     ;; LSP mode
     (use-package lsp-mode
       :ensure t
       :custom
       (lsp-headerline-breadcrumb-enable nil)
       (lsp-signature-auto-activate nil)
       (lsp-signature-render-documentation nil)
       (lsp-enable-file-watchers nil)
       (lsp-log-io nil)
       (lsp-rust-analyzer-cargo-watch-command "clippy")
       (lsp-rust-analyzer-server-display-inlay-hints t) 
       :hook (python-mode . lsp)
	      (c-mode . lsp)
	      (c++-mode . lsp)
	      (ess-r-mode . lsp)
	      (inferior-ess-r-mode . lsp)
	      (objc-mode . lsp)
	      (cuda-mode . lsp)
	      (go-mode . lsp)
	      (latex-mode . lsp)
	      (julia-mode . lsp)
	      (lsp-enable-which-key-integration . lsp)
       :commands lsp)

     ;; LSP UI
     (use-package lsp-ui
       :ensure t
       :custom
       (lsp-ui-sideline-show-hover nil)
       (lsp-ui-doc nil))  

     ;; dap-mode
     (use-package dap-mode
       :ensure t
       :config
       (dap-mode 1)
       (dap-ui-mode 1)
       (dap-tooltip-mode 1)
       (tooltip-mode 1)
       (dap-ui-controls-mode 1)
       ;; dap-cpp-c-rust
       (require 'dap-lldb)
       (require 'dap-gdb-lldb)
       (dap-register-debug-template
	"Rust::LLDB Run Configuration"
	(list :type "lldb"
	      :request "launch"
	      :name "LLDB::Run"
	      :gdbpath "rust-lldb"
	      :target nil
	      :cwd nil))
       (dap-register-debug-template
	"Rust::GDB Run Configuration"
	(list :type "gdb"
	      :request "launch"
	      :name "GDB::Run"
	      :gdbpath "home/alangel/.cargo/bin/rust-gdb"
	      :target nil
	      :cwd nil))
       ;; dap-python
       (require 'dap-python)
       (setq dap-python-debugger 'debugpy)
       ;; dap-go
       (require 'dap-go))

     (use-package company
       :ensure t
       :after lsp-mode
       :hook (lsp-mode . company-mode)
       :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

     (use-package company-box
       :ensure t
       :hook (company-mode . company-box-mode))

     ;; flycheck
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
       #+end_src
** Python
   My *Python* configuration. ~Pyright~ is my preferred implementation of lsp server.
   #+begin_src emacs-lisp
     ;; Python setup
     (use-package python
       :ensure t
       :custom
       (python-shell-interpreter "python")
       (python-shell-interpreter-args "-i")
       (python-indent-offset 4))

     (use-package pyenv-mode
       :ensure t)
     (pyenv-mode)

     (use-package python-isort
       :ensure t
       :hook (python-mode . python-isort-on-save-mode))

     (use-package python-black
       :ensure t
       :hook (python-mode . python-black-on-save-mode))

     (require 'pyenv-mode)

     (defun projectile-pyenv-mode-set ()
       "Set pyenv version matching project name."
       (let ((project (projectile-project-name)))
	 (if (member project (pyenv-mode-versions))
	     (pyenv-mode-set project)
	   (pyenv-mode-unset))))

     (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

     (use-package lsp-pyright
       :ensure t
       :custom
       (setq lsp-pyright-auto-import-completions t)
       (setq lsp-pyright-diagnostic-mode "workspace")
       (setq lsp-pyright-typechecking-mode "basic")
       :hook (python-mode . (lambda ()
			       (require 'lsp-pyright)
			       (lsp))))
   #+end_src
   
** R
   ~ESS~ is a must-have in combination with ~LSP~ for R development. Below is my configuration for ~ESS~.
   #+begin_src emacs-lisp
     (use-package ess
       :ensure t
       :custom
       (ess-history-file nil)
       (ess-style 'Rstudio)
       (ess-source-directory (lambda()
			       (concat ess-directory "src/")))
       :config
       (require 'ess-r-mode)
       (define-key ess-r-mode-map "C-c C-=" 'ess-cycle-assign)
       (define-key inferior-ess-r-mode-map "C-c C-=" 'ess-cycle-assign))

   #+end_src
** C/C++
   Config for *C/C++* development.
   #+begin_src emacs-lisp
     (use-package ccls
       :ensure t
       :after lsp
       :custom (setq ccls-executable "ccls")
       :hook ((c-mode c++-mode objc-mode cuda-mode) .
	      (lambda () (require 'ccls) (lsp))))
   #+end_src
** Rust
   I enjoy using this config to learn *Rust* however I can't make the debugger working at the moment...
   #+begin_src emacs-lisp
     (use-package rustic
       :ensure t
       :config
       ;; comment to disable rustfmt on save
       (setq rustic-format-on-save t))
   #+end_src
** Go
   Simple *Go* environment. Everything works!!
   #+begin_src emacs-lisp
     (use-package go-mode
       :ensure t)

     (defun lsp-go-install-save-hooks ()
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
     (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

     (provide 'gopls-config)
   #+end_src 
** Julia
   *Julia* config. The config works but the startup time of the langage server is painful...
   #+begin_src emacs-lisp
     (use-package julia-mode
       :ensure t)

     (use-package julia-repl
       :ensure t
       :after julia-mode
       :hook
       (julia-mode . julia-repl-mode)
       :config
       (julia-repl-set-terminal-backend 'vterm)
       (setq vterm-kill-buffer-on-exit nil))
   #+end_src
** Evil
   I became addicted of some Vim shortcuts. So I use a mix of *Vim* and *Emacs** command.
   #+begin_src emacs-lisp
     ;; Vim keys
     (use-package evil
       :ensure t ;; install the evil package if not installed
       :init ;; tweak evil's configuration before loading it
       (setq evil-search-module 'evil-search)
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (setq evil-shift-round nil)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       :config ;; tweak evil after loading it
       (evil-mode)
 
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init)))

     (defun evil-collection-vterm-escape-stay ()
     "Go back to normal state but don't move
     cursor backwards. Moving cursor backwards is the default vim behavior but it is
     not appropriate in some cases like terminals."
     (setq-local evil-move-cursor-back nil))

     (add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay)
   #+end_src
** Yasnippet
   Yasnippet is a useful package to define snippets in *Emacs*. All the snippets must be placed in ~~/.emacs.d/snippets~. You can also change the location if you want.
   #+begin_src emacs-lisp
     (use-package yasnippet
      :ensure t
      :hook ((text-mode
	      prog-mode
	      conf-mode
	      snippet-mode) . yas-minor-mode-on)
      :init
      (setq yas-snippet-dir "~/.emacs.d/snippets"))

     (use-package yasnippet-snippets
       :ensure t)
   #+end_src

** Latex
   Some *LaTeX* utils.
   #+begin_src emacs-lisp
   (use-package tex :defer t :ensure auctex :config (setq TeX-auto-save t))
   #+end_src
** Utils el
   Some utils and packages I use. 
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t)

     (global-set-key (kbd "C-c c") 'shell-command)

     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))

     (use-package s
       :ensure t)
   #+end_src

** YAML
   For editing YAML file.
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :ensure t)

     (add-hook 'yaml-mode-hook
	       '(lambda ()
		  (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
   #+end_src
